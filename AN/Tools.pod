=pod

=encoding utf8

=head1 NAME

AN::Tools

Serves only to load all other AN::Tools::* modules in a common object and provide shortcuts to their methods.

=head1 SYNOPSIS

  use AN::Tools;

  # Get a common object handle on all AN::Tools::* modules.
  my $an=AN::Tools->new();
  
  # Again, but this time tell the AN::Tools::String module to force the use of
  # UTF-8 mode when reading it's built-in XML words file and to set the default
  # language as Japanese.
  my $an=AN::Tools->new({
  	default_language	=>	'jp',
  	String			=>	{
  		force_utf8		=>	1,
  	},
  });

=head1 DESCRIPTION

This module provides access to all the AN::Tools::* modules' methods. For details on what methods each module provides, please see their respective perldocs or visit the AN::Tools webite, http://alteeve.com.

Some modules can be passed load-time values to alter how the AN::Tools suite starts. Where this is the case, you can pass a hash reference where the key structure is '$hashref->{module_name}{method_name}=arg' or, when a method takes several parameters, '$hashref->{module_name}{method_name}{arg_name}=arg'.

Currently supported load-time arguments:

=over

=item C<default_language>

Tell all AN::Tools modules to use a different default language. The format is: [C<{default_language}='code'>].

=item C<dbus_address>

I<NOTE>: This option must be set when AN::Tools is first loaded because the constructor method itself connects to the DBus!

Tell all AN::Tools modules to use a specific address for the DBus message bus. The default is to use the 'system' bus. An example value might be: [C<unix:path=/tmp/tb_dbus.socket>] which would use a dedicate UNIX socket. The format is: C<{dbus_address}='arg'>.

=item C<dbus_bus>

This takes no arguments and simply returns a handle to the DBus message bus in use by AN::Tools.

=item C<an_dbus_service>

This takes no arguments and simply returns a handle to the DBus service in use by AN::Tools.

=item C<an_dbus_object>

This takes no arguments and simply returns a handle to the DBus object in use by AN::Tools.

=item C<Readable::base2>

Tell AN::Tools::Readable to translate between byte sizes and human readable sizes using base2 notation when set to: [C<1>] (default) or base10 notation when set to: [C<0>]. The format is: [C<{Readable}{base2}=[0|1]>].

=item C<Log::file>

Tell AN::Tools::Log what file to use for logging purposes. The default is to use: [C</var/log/an_tools.log>]. This must be a fully defined directory path and file name. When archiving is used, the file name is appended with a sequential integer. When compression is also used, the compression suffix is appended after the sequence number. The format is: [C<{Log}{file}='/path/to/file'>].

=item C<Log::cycle_size>

Tell AN::Tools::Log what size the log file is allowed to grow to. If set to C<0> then no limit is set. The default is: [C<10M>] (10 mibibyte unless base10 is in use in which case it is 10 megabyte). If you wish to set a specific byte size, pass this option a raw integer or use a suffix like 'MiB' or 'MB' to bypass the 'base2' value. Please be aware that the log file will not necessarily be cycled at exactly this size but instead this size plus the remainder of the log entry that pushed the size beyond this value. What happens to the log file depends on what 'archive' is set to. The format is: [C<{Log}{cycle_size}='#_bytes|human_readable_size'>].

=item C<Log::archives>

Tell AN::Tools::Log how many archives to keep once the log file size limit is reached. The default is: [C<5>]. If set to: [C<0>], the method C<chomp_head> is called (see below). If C<chomp_head> returns C<0> then no archives are kept and the log file is simply erased and re-opened. The format is: [C<{Log}{archives}=#>].

=item C<Log::compression>

Tell AN::Tools::Log what compression program to use when archiving the log file. Ignored if 'archive' is 0. This must be the full path to the executable to ensure that the compression will work when run properly when the shell's PATH variable is not set (ie: when run from 'C<cron>'). The default is: [C</bin/gzip>]. If this is unset then no compression is performed on archived copies of the log file. The format is: [C<{Log}{compression}='/path/to/binary'>].

=item C<Log::compression_switches>

Tell AN::Tools::Log what command line switches to use when calling the compression program. Ignored if 'archive' is 0. If this is left blank, AN::Tools will check the compression program in use, if any, and set sane switches if it recognizes the program in use. Currently C<gzip> and C<bzip2> are detected and set. Switches are always applied after the compression program binary and before the log file name being compressed. Please include dashes as you would on the command line. The format is: [C<{Log}{compression_switches}='-a --b -xyz'>].

=item C<Log::compression_suffix>

Tell AN::Tools::Log what suffix to apply to the compressed log file name after the sequence number when needed. When none is supplied, AN::Tools will attempt to determine what suffix to set, if needed, based on the compression program in use. Currently C<gzip> will auto-set C<gz> and C<bzip2> will auto-set C<bz>. Do not include the period. The format is: [C<{Log}{compression_suffix}='suffix'>].

=item C<Log::chomp_head>

Tell AN::Tools::Log many lines to erase from the head of the log file when the log file's maximum length is reached. Ignored if C<archives> is set greate than C<0>. Default is C<500>. Be sure to set to a high enough number that this truncation doesn't occur too often as it introduces a fair amount of disk I/O overhead. Please see the AN::Tools::Log perldoc for more information. The format is: [C<{Log}{chomp_head}=#>].

=item C<Log::chomp_head_buffer>

Tell AN::Tools::Log When C<chomp_head> is used, the log file being truncated needs to be re-written as a temporary file minus the C<chomp_head> number of header lines. To prevent memory issues, the source log file is temporarily logged and read this method's number of bytes at a time. The default is C<16384> bytes (16 kibibytes) and should be sufficient for most systems. Only pass a raw number of bytes to this method! Translation from human readable sizes does not occur! Change this with care. Please see the AN::Tools::Log perldoc for more information. The format is: [C<{Log}{chomp_head_buffer}=#>].

=item C<String::force_utf8>

Tell AN::Tools to force the use of UTF-8 mode when reading it's internal XML words file. The format is: C<{String}{force_utf8}=[0|1]>.

=back

=head1 NOTES

All AN::Tools::* modules expects the data they receive to be in UTF-8 encoded format. Likewise, they return UTF-8 encoded strings. If you are getting weird output or are seeing a "wide character in print" error, check that you are not getting double-encoded UTF-8 strings by casting your data as UTF-8 in the first place.

=head1 METHODS

Below are the detailed usage instructions for the methods provided by this module.

=head2 new

=head3 Example

  use AN::Tools;

  # Get a handle on the MB::Tools object.
  my $an=AN::Tools->new;

  # With the handle to this module's object, you access the rest of the
  # AN::Tools::* suite of modules by calling them by their method name. For
  # example, to access AN::Tools::Math's 'round' method, call it like this:
  $an->Math->round({number=>30.33754, places=>2});
  
  # The format is always:
  #$an->Module->Method(<parameters>);

=head3 Details

This is the constructor method used to access this object's handle on the various AN::Tools::* objects. It also provides access to the methods provided by these modules as seen in the example above. Access to each module's methods is formatted this way to make the resulting code clearer and somewhat self-documenting. This access method cannot be (safely) circumvented as AN::Tools does not use C<@ISA> to access the child (sibling) module's methods nor do the other methods C<Export> their methods. Attempting to directly access the child modules will fail as they require access to one another and expect to be able to do this via the C<AN::Tools> module.

The current supported modules are:

=over

=item * AN::Tools::Alert

=item * AN::Tools::Check

=item * AN::Tools::Log

=item * AN::Tools::Math

=item * AN::Tools::Readable

=item * AN::Tools::String

=back

=head2 error

=head3 Example

  # See if an error state exists.
  die "AN::Tools failed on the last call. Error was: ".$an->error if $an->error;

=head3 Details

This method takes no arguments. It simply returns the last error if set, otherwise it returns undef. This method only has use if '$an->Alert->no_fatal_errors' has been set to '1'. Otherwise the method call with an error would have died before returning.

=head2 default_language

=head3 Example

  # Set and/or return what the current default language code is.
  my $current_lang=$an->default_language;
  print "Language: [$current_lang].\n"; # Prints "Language: [en_CA]."
  
  # Change the default language to Japanese.
  $current_lang=$an->default_language('jp');
  print "Language: [$current_lang].\n"; # Now prints "Language: [jp]."

=head3 Details

This method sets the default language to use when no explicit language is defined when calling language-aware methods like '$an->Log->entry' or '$an->String->get_string'. Normally, it is recommended to set this to the language you want your logs written in as the user's language should always be passed from their preference settings. However, this is just by convention.

=head1 Child Module Access

In traditional perl parlance, these modules are siblings of this module. However, it makes a bit more sense to think of them as child objects because of how access is structured.

=head2 C<Alert>

=head3 Example

  # Access the example 'foo' method.
  $an->Alert->foo.
  
=head3 Details

The C<AN::Tools::Alert> module handles warnings and errors.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Alert>

=head2 C<Check>

=head3 Example

  # Access the example 'foo' method.
  $an->Check->foo.
  
=head3 Details

The C<AN::Tools::Check> module handles checking system and internal conditions.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Check>

=head2 C<Log>

=head3 Example

  # Access the example 'foo' method.
  $an->Log->foo.
  
=head3 Details

The C<AN::Tools::Log> module handles writing to the log file.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Log>

=head2 C<Math>

=head3 Example

  # Access the example 'foo' method.
  $an->Math->foo.
  
=head3 Details

The C<AN::Tools::Math> method handles mathmatical operations.

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Math>

=head2 C<Readable>

=head3 Example

  # Access the example 'foo' method.
  $an->Readable->foo.
  
=head3 Details

The C<AN::Tools::Readable> method handles converting large bits of data, generally numbers, sizes and UNIX timestamps, between more human readable formats and back

Please read this modules POD documentation using your favourite POD reader. The most common one at the command shell being C<perldoc>.

C<perldoc AN::Tools::Readable>

=head2 C<data>

=head3 Example

  # Get a handle on AN::Tool's internal data store.
  my $data=$an->data;

=head3 Details

All AN::Tools modules store their data in a common, user-accessible hash reference. This allows easy access to variables read in from configuration files, a given language's word strings and so forth.

For example, say that your configuration file had the variable-value pair:

C<foo::bar = baz>

You could see the value read for C<foo::bar> by:

print "The value of 'foo::bar' is: [$data->{foo}{bar}]\n";  # prints "The value of 'foo::bar' is: [baz]";

Another example, though not realistic, would be to access the word string 'an_0000' in the language 'en_CA':

my $word=$an->data()->{words}{lang}{en_CA}{key}{an_0000}{content};
print "Word: [$word].\n"; # prints "Word: [AN::Tools rapid development suite.]."

Realistically though, you'll probably want to access strings via 'AN::Tools::String's 'get_word()' method.

=head1 SEE ALSO

Other modules in the AN::Tools suite:

=over

=item AN::Tools::Alert

=item AN::Tools::Check

=item AN::Tools::Log

=item AN::Tools::Math

=item AN::Tools::Readable

=item AN::Tools::String

=item AN::Tools::Storage

=back

=head1 LICENSE

 Copyright (c) 2009 Alteeve's Niche!. All rights reserved.
 This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
