=pod

=encoding utf8

=head1 NAME

AN::Tools::Log

This is the logging module for AN::Tools. It handles both writing log entries as well as managing and archiving the log files themselves.

=head1 SYNOPSIS

  use AN::Tools;

  # Get a common object handle on all AN::Tools::* modules.
  my $an=AN::Tools->new();
  
  # Access this module's methods using '$an->Log->method()' syntax. For
  # example, here is one way you could write an entry in the log file.
  my $rounded=$an->Log->entry({
  	level		=>	3,
  	string		=>	"This is an entry in the log file",
	file		=>	$THIS_FILE,
	line		=>	__LINE__
  });

=head1 DESCRIPTION

The main user-level method provided by this module is 'entry', which enters a log entry. Behind the scenes, the module also provides all of the methods needed to cycle and archive log files.

=head1 NOTES

All AN::Tools::* modules expects the data they receive to be in UTF-8 encoded format. Likewise, they return UTF-8 encoded strings. If you are getting weird output or are seeing a "wide character in print" error, check that you are not getting double-encoded UTF-8 strings by casting your data as UTF-8 in the first place.

=head1 METHODS

Below are the detailed usage instructions for the methods provided by this module.

=head2 entry

=head3 Example

  ### This is an example using every option available to this method:
  # This specifies a couple of optional values. It adds variables that will be
  # inserted into the title key. It also specifies a specific language to use
  # when generating the log string and writes the result to a specific file
  # handle.
  my $other_log=IO::Handle->new();
  open ($other_log, ">/tmp/an_alt.log") || die "Whut! Failed to open: [/tmp/an_alt.log], error was: $!\n";
  $an->Log->entry({
  	  title_key	=>	"title_0001",
  	  title_vars	=>	["foo"],
  	  message_key	=>	"log_0000",
  	  message_vars	=>	["一つ", "二つ", "三つ"],
  	  file		=>	$THIS_FILE,
  	  line		=>	__LINE__,
  	  log_level	=>	3,
  	  filehandle	=>	$other_log,
  	  language	=>	'jp',
  });
  $other_log->close;
  
  # If you have a formatted string, you can pass it directly and no parsing
  # will be done at all. The string will be recorded as-is.
  $an->Log->entry({
  	level		=>	1,
	raw		=>	"This is how I died.",
  });

=head3 Details

This takes a log message and writes it to the log file if the C<level> parameter is equal to or higher than the active log level.

=head1 SEE ALSO

Other modules in the AN::Tools suite:

=over

=item AN::Tools

=item AN::Tools::Alert

=item AN::Tools::Check

=item AN::Tools::Math

=item AN::Tools::Readable

=item AN::Tools::String

=item AN::Tools::Storage

=back

=head1 LICENSE

 Copyright (c) 2012 Alteeve's Niche!. All rights reserved.
 This program is free software; you can redistribute it and/or modify it under the same terms as Perl itself.

=cut
