# This is the default configuration file for the AN::Tools. Any value in here
# can be overwritten by your configuration file by calling...

###############################################################################
# Directories                                                                 #
# - This sections sets the core directories, Any directories that are not     #
#   fully qualified will be set relative to 'dir::install' unless             #
#   specifically stated otherwise. Be sure then to change 'dir::install' to   #
#   be the root of your program. At this time, directories are not created on #
#   demand, so please be sure to have created them before running your        #
#   program for the first time.                                               #
#                                                                             #
#   NOTE:                                                                     #
#   To make sure that your program is portable, use a double-colon '::' as    #
#   directory delimeters. AN::Tools will concert these to your operating      #
#   system's directory delimiter on demand. If you use your OS delimiter, it  #
#   will work fine but your program will be less portable. For example, these #
#   two values are equal on POSIX operating systems:                          #
#   - /var/www/alteeve.com    # Not portable, works on POSIX OS' only.        #
#   - ::var::www::alteeve.com # Will port to any supported OS but is more     #
#                             # tedious to type.                              #
###############################################################################

# This should be the root directory of your program. This must be a fully
# defined directory so please set a leading directory delimiter. Please always
# use a trailing directory delimiter!
#dir::install			=	::var::www::alteeve.com::
dir::install			=	::var::www::alteeve.com::

# This is the directory on disk where your program's executables are. Please
# use a trailing directory delimiter.
#dir::cgi_bin			=	cgi-bin::
dir::cgi_bin			=	cgi-bin::

# This is the directory on disk where your program's templates, raw HTML files,
# images and all other non-program files exist. Please use a trailing directory
# delimiter.
#dir::html			=	html::
dir::html			=	html::

# This is where temporary files are written. This can either be a dedicated
# directory under your program's root or it can be your operating system's
# temporary directory. If you want to use the later, be sure to fully qualify
# this directory. If there is no leading directory delimiter, it will be used
# under 'dir::install'. Please use a trailing directory delimiter in either
# case.
#dir::temp			=	temp::
dir::temp			=	temp::

# This is where log files will be written to. Like with 'dir::temp', this can
# either be under your 'dir::install' directory or it can be set to your
# operating system's log directory. If you want to use the later, be sure to
# fully qualify this directory. If there is no leading directory delimiter, it
# will be used under 'dir::install'. Please use a trailing directory delimiter
# in either case.
# MADI: Make this settable to 'daemon' and then sort out how to use various OS'
#       logging mechanisms.
#dir::logs			=	logs::
dir::logs			=	logs::

# This is a comma-seperated list of directories to search within when looking
# for executable. If left unset, the PATH environment variable will be
# consulted. Be aware that this environment variable could be limited or empty
# in some cases, like when running under cron or when the main program's %ENV
# hash is cleaned up for security reasons. Note also that, when reading in
# the PATH value, colons are automatically converted to commas.
dir::bin_paths			=	/usr/local/sbin,/usr/local/bin,/usr/sbin,/usr/bin,/sbin,/bin


###############################################################################
# Log Settings                                                                #
# - This section control how log files are maintained, regardless of where    #
#   they are written.                                                         #
###############################################################################

# This is the name of file used to write log files to. This must be just the
# file name, and not include any directories.
#log::file			=	an_tools.log
log::file			=	an_tools.log

# This sets the logging level. The valid values are:
# 0 = No logging at all.
# 1 = Only critical events are logged.
# 2 = (Default) Informative events are logged.
# 3 = First debug log level. This will generate a lot of output. Most notably,
#     this log level will record all database queries and replies.
# 4 = This should only be used when you are tracing a specific bug. It will
#     generate a tremendous amount of data. For this reason, be sure that your
#     log::cycle_size is set to '0' or to a sufficiently high level to prevent
#     frequent log cycling.
#log::level			=	2
log::level			=	3

# This controls when a log file is either spooled off or archived. Once the log
# file exceeds the size below, it will either have 'log::chomp_head' number of
# lines deleted from the front of the file, be compressed and archived or
# simply erased. To disable management of the log file, set this to '0'. When
# disabled, the log file will be allowed to grow forever. Please be careful if
# your system is low on disk space or has a relatively small maximum file size.
# This is doubly important if your log::level is set above 2. If this is set to
# a raw number, it will be interpreted as a number of Mibibytes or Megabytes,
# depending on how 'math::use_base' is set. If you want to specify a differnt
# size, you can add a suffix letter, like '1G'. If you want to override
# 'math::use_base', you can specifiy a full size type suffix, like '1GiB' or
# '1GB' for 1 gibibyte or 1 gigabyte, respectively.
# NOTE: The log file size is checked before each log entry is made. Therefor,
# it is possible to exceed this limit. This is a concern if the last message
# to be written is very large. For this reason, be sure to give yourself a bit
# of head room when specifying this value. This is particularly important when
# using a log level of 4.
#log::cycle_size		=	100M
log::cycle_size			=	1M

# When set to a non-zero value, AN::Tools increment all existing log archives
# by 1, move the current log file by appending the suffix '.1' and recreating
# an emply log file. If 'log::compression' is set, then the old log file will
# be compressed to save disk space. While incrementing, if the oldest log
# archive exceeds this value, it is simply deleted.
#log::archives			=	5
log::archives			=	5

# This is the compression type to use when archiving old log files. If this is
# left blank, log files will not be compressed. This must be the name of the
# program, for example, 'gzip' or 'bzip2'. If you wish, you can set this to be
# the fully defined path to the executable. If left as the bare name, it will
# be searched for in the 'dir::bin_paths' directories.
#log::compression		=	bzip2
log::compression		=	bzip2

# If 'log::compression' is selected, you can pass optional switched to the
# binary by specifying them here. By default, AN::Tools uses a set of sane
# switches or no switches at all. This can generally be left blank.
# Specifically, AN::Tools uses:
# gzip:
# - gzip an_tools.log.1  # Generates 'an_tools.log.1.gz'
#   Suggested switches; 
#   -1, -2, ... -9       # Sets the compression strength. The default is 6. -1
#                        # is the least compression/fastest speed and -9 is the
#                        # strongest compression/slowest speed.
# bzip2
# - bzip2 an_tools.log.1 # Generates 'an_tools.log.1.bz2'
#   Suggested switches; 
#   -1, -2, ... -9       # Sets the compression strength same as 'gzip'.
# 7zip
# - #needs to be added.
#log::compression_switches	=	
log::compression_switches	=	

# When 'log::archives' is set to '0' and 'log::cycle_size' is greater than '0',
# AN::Tools will check to see if this is set. If it is set, then when the log
# file exceeds the 'log::cycle_size' size, this number of lines will be deleted
# from the top of the log file. This process is expensive. If you notice you
# are experience noticeable performance hits, try increasing this value.
#log::chomp_head		=	2500
log::chomp_head			=	2500

# When the log file is being spooled off, it needs to be read into a temporary
# file, minus the first 'log::chomp_head' lines. Once this new file is written,
# the old file is removed and the new, shorter file is moved into place. This
# value controls how much is read from the old log file to the new log file in
# a given moment. Generally you can leave this alone, though you might want to
# experiment with different values to see if you can improve performance. This
# represents a number of kibibytes.
#log::chomp_head_buffer		=	16384
log::chomp_head_buffer		=	16384


# 
math::use_base			=	2

